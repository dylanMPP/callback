pages = [{"l":"api/index.html","n":"API","t":" API","d":"api"},
{"l":"api/DivideAndConquerPacket.html","n":"DivideAndConquerPacket","t":"package DivideAndConquerPacket","d":"DivideAndConquerPacket"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"DivideAndConquer","t":"object DivideAndConquer extends App with IDivideAndConquer","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"numberOfInversions","t":"def numberOfInversions(list: List[Int]): Int","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"improvingQuickSort","t":"def improvingQuickSort(list: List[Int]): List[Int]","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"randomized3WayPartition","t":"def randomized3WayPartition(list: List[Int], pivot: Int, pivot2: Int, left: List[Int], center: List[Int], right: List[Int]): (List[Int], List[Int], List[Int])","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"closestPoints","t":"def closestPoints(list: List[List[Int]]): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"noVoidPoints","t":"def noVoidPoints(list: List[List[Int]], resultList: List[List[Int]]): List[List[Int]]","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"middleLine","t":"def middleLine(list: List[List[Int]]): List[Double]","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"notExceedD","t":"def notExceedD(list: List[List[Int]], middleLine: List[Double], d: Double, resultList: List[List[Int]]): List[List[Int]]","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"min","t":"def min(value: Double, value2: Double): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"mergeSortPoints","t":"def mergeSortPoints(list: List[List[Int]], whichPoints: Int): List[List[Int]]","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"mergePoints","t":"def mergePoints(list_left: List[List[Int]], list_right: List[List[Int]], whichPoints: Int): List[List[Int]]","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"findMinDistance","t":"def findMinDistance(list: List[List[Int]], min: Double): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"parallelForsMinDistance","t":"def parallelForsMinDistance(pair: List[Int], list: List[List[Int]], distances: List[Double]): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"minDistanceOfPairDistances","t":"def minDistanceOfPairDistances(distancesList: List[Double], min: Double): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"mergeSort","t":"def mergeSort(list: List[Int]): (List[Int], Int)","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"merge","t":"def merge(list_left: List[Int], list_right: List[Int], countInv: Int): (List[Int], Int)","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"random","t":"def random(start: Int, end: Int): Int","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"euclideanDistance","t":"def euclideanDistance(firstPair: List[Int], secondPair: List[Int]): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"euclideanDistanceRecursive","t":"def euclideanDistanceRecursive(firstPair: List[Int], secondPair: List[Int], result: Double): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"pred","t":"def pred(n: Int): Int","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"abs","t":"def abs(x: Double): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"pow","t":"def pow(base: Int, exp: Int): Int","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"upgrade","t":"def upgrade(number: Double, aprox: Double): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"isGoodEstimation","t":"def isGoodEstimation(number: Double, aprox: Double): Boolean","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"iterativeSquareRoot","t":"def iterativeSquareRoot(number: Double, aprox: Double): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/DivideAndConquer$.html","n":"squareRoot","t":"def squareRoot(number: Double): Double","d":"DivideAndConquerPacket/DivideAndConquer$"},
{"l":"api/DivideAndConquerPacket/IDivideAndConquer.html","n":"IDivideAndConquer","t":"trait IDivideAndConquer","d":"DivideAndConquerPacket/IDivideAndConquer"},
{"l":"api/DivideAndConquerPacket/IDivideAndConquer.html","n":"numberOfInversions","t":"def numberOfInversions(list: List[Int]): Int","d":"DivideAndConquerPacket/IDivideAndConquer"},
{"l":"api/DivideAndConquerPacket/IDivideAndConquer.html","n":"improvingQuickSort","t":"def improvingQuickSort(list: List[Int]): List[Int]","d":"DivideAndConquerPacket/IDivideAndConquer"},
{"l":"api/DivideAndConquerPacket/IDivideAndConquer.html","n":"closestPoints","t":"def closestPoints(list: List[List[Int]]): Double","d":"DivideAndConquerPacket/IDivideAndConquer"},
{"l":"api/index.html","n":"API","t":" API","d":"api"}];